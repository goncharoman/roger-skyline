---
  - name: Mandatory part config
    hosts: VMS
    become: true
    become_method: su
    vars_files:
    - ./evars.yml

    tasks:

    - name: Install packages
      apt:
        name: [sudo, ufw, fail2ban, portsentry, mailutils]
        update_cache: true
        force_apt_get: yes

    - name: Change sudo rights
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: "^{{ ansible_user }}"
        insertafter: "^# User privilege specification"
        line: "{{ ansible_user }} ALL=(ALL:ALL) ALL"
        validate: "/usr/sbin/visudo -cf %s"

    - name: Set static IP
      replace:
        path: /etc/network/interfaces
        regexp: "^allow-hotplug enp0s3"
        replace: "auto enp0s3"
        backup: yes

    - name: Remove line from /etc/network/interfaces
      replace:
        path: /etc/network/interfaces
        regexp: "^iface enp0s3 inet dhcp"
        replace: "iface enp0s3 inet static\n\taddress {{ addr }}\n\tnetmask {{ netmask }}\n\tgateway {{ gateway }}"
        backup: yes

    - name: Copy ssh key
      authorized_key:
        user: "{{ ansible_user }}"
        state: present
        key: "{{ lookup('file', '{{ pubkey }}') }}"

    - name: Change ssh port
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#Port 22"
        replace: "Port {{ sshpt }}"
        backup: yes

    - name: No login root
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#PermitRootLogin prohibit-password"
        replace: "PermitRootLogin no"
        backup: yes

    - name: No passwd auth
      replace:
        path: /etc/ssh/sshd_config
        regexp: "^#PasswordAuthentication yes"
        replace: "PasswordAuthentication no"
        backup: yes

    - name: Configure ufw rules
      ufw: rule={{ item.rule }} port={{ item.port }} proto={{ item.proto }}
      with_items:
        - { rule: 'allow', port: '80', proto: 'tcp' }
        - { rule: 'allow', port: '443', proto: 'tcp' }
        - { rule: 'allow', port: '{{ sshpt }}', proto: 'tcp' }

    - name: Enable ufw on startup
      replace:
        path: /etc/ufw/ufw.conf
        regexp: "^ENABLED=no"
        replace: "ENABLED=yes"
        backup: yes

    - name: Add jail.local (only sshd rule)
      copy:
        src: files/jail_1.local
        dest: /etc/fail2ban/jail.local

    - name: Portsentry config (part 1)
      replace:
        path: /etc/portsentry/portsentry.conf
        regexp: '^BLOCK_UDP="0"'
        replace: 'BLOCK_UDP="1"'
        backup: yes

    - name: Portsentry config (part 2)
      replace:
        path: /etc/portsentry/portsentry.conf
        regexp: '^BLOCK_TCP="0"'
        replace: 'BLOCK_TCP="1"'
        backup: yes

    - name: Portsentry config (part 3)
      replace:
        path: /etc/portsentry/portsentry.conf
        regexp: "^KILL_ROUTE"
        replace: "#KILL_ROUTE"
        backup: yes

    - name: Portsentry config (part 4)
      replace:
        path: /etc/portsentry/portsentry.conf
        after: "# iptables support for Linux"
        before: "# iptables support for Linux with limit and LOG support."
        regexp: '^#'
        replace: ''
        backup: yes

    - name: Change portsentry mode
      replace:
        path: /etc/default/portsentry
        regexp: '^TCP_MODE="tcp"\nUDP_MODE="udp"'
        replace: 'TCP_MODE="atcp"\nUDP_MODE="audp"'
        backup: yes

    - name: Disable apt-daily.timer
      systemd:
        name: apt-daily.timer
        enabled: no

    - name: Disable apt-daily-upgrade.timer
      systemd:
        name: apt-daily-upgrade.timer
        enabled: no

    - name: Disable console-setup.service
      systemd:
        name: console-setup.service
        enabled: no

    - name: Disable keyboard-setup.service
      systemd:
        name: keyboard-setup.service
        enabled: no

    - name: Copy update-script.sh to /usr/local/bin/
      copy:
        src: files/update_script.sh
        dest: /usr/local/bin/update_script
        owner: root
        group: root
        mode: u=rwx,g=rx,o=r

    - name: Add task to /etc/crontab (@reboot)
      lineinfile:
        dest: /etc/crontab
        state: present
        line: '@reboot root /usr/local/bin/update_script'

    - name: Add task to /etc/crontab (every week at 4 AM)
      lineinfile:
        dest: /etc/crontab
        state: present
        line: "0 4 * * 1 root /usr/local/bin/update_script"

    - name: Copy cronMonitor.sh to /usr/local/bin/
      copy:
        src: files/cronMonitor.sh
        dest: /usr/local/bin/cronMonitor
        owner: root
        group: root
        mode: u=rwx,g=rx,o=r

    - name: Add monitor task to /etc/crontab
      lineinfile:
        dest: /etc/crontab
        state: present
        line: "0 0 * * * root /usr/local/bin/cronMonitor"

  - name: Install packages for web part
    hosts: VMS
    become: true
    become_method: su
    vars_files:
    - ./evars.yml

    tasks:

      - name: Add http-get-dos.conf
        copy:
          src: files/http-get-dos.conf
          dest: /etc/fail2ban/filter.d/http-get-dos.conf

      - name: Add jail.local (with http)
        copy:
          src: files/jail_2.local
          dest: /etc/fail2ban/jail.local

      - name: Install deb package
        apt:
          name: [apache2, python3, python-pip, python-setuptools, python3-setuptools, libapache2-mod-wsgi, git]
          update_cache: true
          force_apt_get: yes

      - name: Eanble mod_wsgi
        command: /usr/sbin/a2enmod wsgi

      - name: Enable ssl mod
        command: /usr/sbin/a2enmod ssl

      - name: Adduser webmaster
        user:
          name: webmaster
          group: www-data
          shell: /bin/false
          create_home: False

      - name: Install virtualenv
        pip:
          name: virtualenv
          executable: pip

      - name: Create /var/www/app.local
        file:
          path: /var/www/app.local
          state: directory
          owner: webmaster
          group: www-data
          mode: 0755

      - name: Git config
        git_config:
          name="{{ item.name }}"
          scope=global
          value="{{ item.value }}"
        with_items:
          - {name: "user.name",  value: "{{ git_username }}" }
          - {name: "user.email", value: "{{ git_email }}" }

      - name: Deploy project
        git:
          repo: "https://github.com/goncharoman/roger-flaskapp.git"
          dest: /var/www/app.local/
          clone: yes

      - name: Set virtualenv
        pip:
          requirements: /var/www/app.local/requirements.txt
          virtualenv: /var/www/app.local/venv
          virtualenv_python: python3

      - name: Create log dir
        file:
          path: /var/log/app.local/log
          state: directory
          owner: webmaster
          group: www-data
          mode: 0755

      - name: Change venv dir mode
        file:
          path: /var/www/app.local/venv
          owner: webmaster
          group: www-data
          mode: 0755

      - name: Create /var/www/site.lcoal
        file:
          path: /var/www/site.local
          state: directory
          owner: webmaster
          group: www-data
          mode: 0755

      - name: Add index.html to site.local
        copy:
          src: files/index.html
          dest: /var/www/site.local/index.html
          owner: webmaster
          group: www-data
          mode: 0755

      - name: Create openssl cert
        command: /usr/bin/openssl req -x509 -newkey rsa -keyout /etc/ssl/private/server.pem -out /etc/ssl/certs/server.pem -nodes -days 365 -subj '/CN=roger-skyline'

      - name: Disable 000-dafault.conf
        command: /usr/sbin/a2dissite 000-default.conf

      - name: Copy configs in sites-available
        copy: src="{{ item.src }}" dest="{{ item.dest }}"
        with_items:
          - {src: "files/app.local.conf", dest: "/etc/apache2/sites-available/app.local.conf"}
          - {src: "files/site.local.conf", dest: "/etc/apache2/sites-available/site.local.conf"}

      - name: Enable configs
        command: /usr/sbin/a2ensite "{{ item.site }}"
        with_items:
          - {site: "app.local.conf"}
          - {site: "site.local.conf"}

      - name: Add site.local to /etc/hosts
        lineinfile:
          dest: /etc/hosts
          state: present
          line: "127.0.0.1 {{ item.dom }}"
        with_items:
            - {dom: "app.local"}
            - {dom: "site.local"}

      - name: Copy autodeploy script
        copy:
          src: files/deploy.sh
          dest: /usr/local/bin/autodeploy
          owner: root
          group: root
          mode: u=rwx,g=rx,o=r

      - name: Add task in crontab
        lineinfile:
          dest: /etc/crontab
          state: present
          line: "{{ item.tab }} root /usr/local/bin/autodeploy"
        with_items:
          - {tab: "@reboot"}
          - {tab: "*/10 * * * *"}
